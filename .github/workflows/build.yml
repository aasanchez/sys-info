# Workflow Name: Build-Deb
# This workflow is a comprehensive automation pipeline designed to build and test the sys-info application.
# The process begins when changes are pushed to the main branch, ensuring the codebase is always tested and validated.
# It has two key jobs: the "build" job, responsible for compiling and preparing artifacts, and the "test" job, which verifies the functionality of the application.

name: Build-Deb

on:
  workflow_dispatch:
  # Event Trigger: Pushes to the main branch
  # Each time a commit is pushed to the main branch, this workflow initiates.
  push:
    branches:
      - main

jobs:
  build:
    # The "build" job takes place in a clean Ubuntu 24.04 environment.
    # Its goal is to compile the sys-info application and prepare it for testing.
    runs-on: ubuntu-24.04
    outputs:
      # Outputs allow the build job to pass key information—such as the latest Git tag, build date, and architecture—to other jobs.
      VERSION: ${{ steps.version.outputs.VERSION }}
      BUILD_DATE: ${{ steps.variables.outputs.BUILD_DATE }}
      ARCH: ${{ steps.variables.outputs.ARCH }}
    steps:
      - name: Checkout code
        # This step ensures that the latest version of the code from the repository is available for the workflow.
        uses: actions/checkout@v4

      - name: Install build dependencies
        # The system is prepared for compilation by installing essential tools such as GCC and build-essential.
        # Without these tools, the sys-info application cannot be compiled.
        run: sudo apt-get update && sudo apt-get install -y build-essential gcc

      - name: Build the project
        # Here, the sys-info application is compiled using GCC.
        # This transforms the C source code (src/sys-info.c) into an executable binary named "sys-info."
        run: gcc -o sys-info src/sys-info.c

      - name: Get current version
        # Git tags are markers that indicate specific releases or versions of the codebase.
        # This step fetches all tags, identifies the latest semantic version (e.g., 1.0.0), and outputs it for use in subsequent steps.
        id: version
        run: |
          VERSION=$(awk 'NF {print; exit}' VERSION)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get build variables
        # Build metadata is crucial for traceability and reproducibility.
        # This step generates the current timestamp as BUILD_DATE and assigns a static architecture value ("all").
        # The variables are stored in GITHUB_OUTPUT for downstream usage and a file named VARS_FILE for artifact storage.
        id: variables
        run: |
          BUILD_DATE=$(date +"%Y%m%d%H%M%S")
          ARCH=all
          echo "BUILD_DATE: $BUILD_DATE"
          echo "ARCH: $ARCH"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_OUTPUT"
          echo "ARCH=$ARCH" >> "$GITHUB_OUTPUT"
          echo "BUILD_DATE=$BUILD_DATE" > VARS_FILE
          echo "ARCH=$ARCH" >> VARS_FILE

      - name: create sys-info artifact
        # Artifacts are files or data produced by a job that can be shared or downloaded.
        # This step uploads the compiled sys-info application and the build metadata file (VARS_FILE).
        # Retention is set to 5 days to ensure the artifacts remain accessible for a reasonable duration.
        uses: actions/upload-artifact@v4
        with:
          name: sys-info
          path: |
            sys-info
            VARS_FILE
          retention-days: 1
  test:
    # The "test" job is responsible for ensuring the sys-info application functions as expected.
    # It relies on the "build" job to provide the compiled application as an input.
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: Download sys_info build
        # This step retrieves the sys-info artifact uploaded during the build job.
        # The artifact includes both the compiled binary and build metadata.
        uses: actions/download-artifact@v4
        with:
          name: sys-info

      - name: Permissions
        # After downloading, the sys-info binary must be made executable.
        # This ensures the system can run the binary during testing.
        run: chmod +x sys-info

      - name: Test execution
        # The sys-info application is executed, and its output is captured.
        # The script verifies the output to ensure the application provides the expected functionality.
        # For example, it checks whether the output includes the phrase "SysInfo package."
        run: |
          OUTPUT=$(./sys-info)
          if echo "$OUTPUT" | grep -q "SysInfo package"; then
            echo "Test 1 passed: Program displays package information."
          else
            echo "Test 1 failed: Package information is missing."
          fi

  package-build:
    runs-on: ubuntu-24.04
    needs: [ build, test ]
    steps:
      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential dpkg-dev gpg tree

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download sys_info build
        uses: actions/download-artifact@v4
        with:
          name: sys-info

      - name: Set binary location
        run: |
          mkdir -p pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/usr/bin
          cp -r sys-info pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/usr/bin
          sudo chmod 755 pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/usr/bin/sys-info
          tree

      - name: DEBIAN control and postinst files
        run: |
          # Debian package structure
          mkdir -p pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN
          cp pkg/scripts/control  pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/control
          sed -i "s/<VERSION>/"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"/g" pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/control
          sed -i "s/<ARCH>/"${{ needs.build.outputs.ARCH }}"/g" pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/control

          # Pre installation script
          cp pkg/scripts/preinst pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/preinst
          chmod 755 pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/preinst

          # Post installation script
          cp pkg/scripts/postinst pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/postinst
          chmod 755 pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/postinst

          # Pre Removal script
          cp pkg/scripts/prerm pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/prerm
          chmod 755 pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/prerm

          # Post Removal script
          cp pkg/scripts/postrm pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/postrm
          chmod 755 pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"/DEBIAN/postrm

      - name: Build DEB package
        run: |
          cd pkg
          dpkg --build sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}"

      - name: relocate artifact
        run: |
          mv pkg/sys-info_"${{ needs.build.outputs.VERSION }}"-"${{ needs.build.outputs.BUILD_DATE }}"_"${{ needs.build.outputs.ARCH }}".deb sys-info.deb
          ls -la sys-info.deb

      - name: Debian Package artifact
        uses: actions/upload-artifact@v4
        with:
          name: sys-info.deb
          path: sys-info.deb
          retention-days: 1

  package-test_get-info:
    runs-on: ubuntu-24.04
    needs: package-build
    steps:
      - name: Download debian-pkg build
        uses: actions/download-artifact@v4
        with:
          name: sys-info.deb

      - name: dpkg-deb --info
        run: dpkg-deb --info sys-info.deb

  package-test_get-content:
    runs-on: ubuntu-24.04
    needs: package-build
    steps:
      - name: Download debian-pkg build
        uses: actions/download-artifact@v4
        with:
          name: sys-info.deb

      - name: dpkg-deb --contents
        run: dpkg-deb --contents sys-info.deb

  package-test_installation:
    needs: package-build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        container:
          - "ubuntu:24.04"
          - "debian:12"
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Install dependencies
        run: apt-get update

      - name: Download debian package
        uses: actions/download-artifact@v4
        with:
          name: sys-info.deb

      - name: System Information
        run: |
          echo "--- OS Release ---"
          cat /etc/os-release
          echo "--- Kernel Information ---"
          uname -a

      - name: Install package
        run: dpkg -i sys-info.deb

      - name: Package Status
        run: dpkg -l | grep sys-info

      - name: Verify binary exists and permissions
        run: ls -la /usr/bin/sys-info

      - name: Verify binary exists
        run: which sys-info

      - name: Test execution
        run: sys-info || true

      - name: Remove package
        run: dpkg -r sys-info

      - name: Verify removal
        run: |
          if which sys-info; then
            echo "Package not properly removed"
            exit 1
          fi

  create-build-tag:
    runs-on: ubuntu-24.04
    needs: [ package-test_get-content, package-test_get-info, package-test_installation, build ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.PAT }}" | gh auth login --with-token

      - name: Get SHA for Source Tag
        id: get_sha
        run: |
          SOURCE_TAG="${{ needs.build.outputs.VERSION }}"
          SOURCE_SHA=$(gh api repos/${{ github.repository }}/git/ref/tags/$SOURCE_TAG --jq '.object.sha')
          echo "SOURCE_SHA=$SOURCE_SHA" >> $GITHUB_ENV

      - name: Create New Tag
        run: |
          NEW_TAG="${{ needs.build.outputs.VERSION }}-${{ needs.build.outputs.BUILD_DATE }}"
          gh api repos/${{ github.repository }}/git/refs \
            -X POST \
            -F ref="refs/tags/$NEW_TAG" \
            -F sha="$SOURCE_SHA"

  create-release:
    runs-on: ubuntu-24.04
    needs: [ create-build-tag, build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download debian package
        uses: actions/download-artifact@v4
        with:
          name: sys-info.deb

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.PAT }}" | gh auth login --with-token

      - name: Create Release
        run: |
          gh release create ${{ needs.build.outputs.VERSION }}-${{ needs.build.outputs.BUILD_DATE }} \
            sys-info.deb \
            --title "Release ${{ needs.build.outputs.VERSION }}-${{ needs.build.outputs.BUILD_DATE }}" \
            --notes "Automatically generated release for ${{ needs.build.outputs.VERSION }}-${{ needs.build.outputs.BUILD_DATE }}"
